apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlin-noarg'


android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled true

        ndk {
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a"
//            , "x86", "x86_64"
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", 'IS_DEBUG', 'true'
        }
        release {
            buildConfigField "boolean", 'IS_DEBUG', 'false'
        }
    }
    dataBinding {
        enabled true
    }
    kapt {
        generateStubs = true
    }

    //jdk1.8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    //避免项目中存在相同的jar包，导致运行失败
    dexOptions {
        preDexLibraries = false
    }

    //出现错误的原因是：AndroidStudio严格审查png图片，就是png没有达到AndroidStudio的要求
    //注：最重要的就是.9图要严格要求做好。禁止Gradle检查PNG的合法性
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false

    //lint配置信息，这里主要是设置自定义lint检测后报告路径，LintOptions类型
    //命令行：gradlew lint      注意，studio自带lint检查，setting——> Inspection
    lintOptions {
        println("开始执行lint检测代码逻辑")
        // 设置为 true，则当 Lint 发现错误时停止 Gradle 构建
        //移除lint检测的error
        abortOnError false
        // 设置为 true，则当有错误时会显示文件的全路径或绝对路径 (默认情况下为true)
        absolutePaths true
        // 仅检查指定的问题（根据 id 指定）
        check 'NewApi', 'InlinedApi'
        // 设置为 true 则检查所有的问题，包括默认不检查问题
        checkAllWarnings true
        // 设置为 true 后，release 构建都会以 Fatal 的设置来运行 Lint。
        // 如果构建时发现了致命（Fatal）的问题，会中止构建（具体由 abortOnError 控制）
        checkReleaseBuilds true
        // 不检查指定的问题（根据问题 id 指定）
        disable 'TypographyFractions', 'TypographyQuotes'
        // 检查指定的问题（根据 id 指定）
        enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
        // 在报告中是否返回对应的 Lint 说明
        explainIssues true
        // 写入报告的路径，默认为构建目录下的 lint-results.html
        //htmlOutput file("lint-report.html")
        // 设置为 true 则会生成一个 HTML 格式的报告
        htmlReport true
        // 设置为 true 则只报告错误
        ignoreWarnings true
        // 重新指定 Lint 规则配置文件
        //lintConfig file("default-lint.xml")
        // 设置为 true 则错误报告中不包括源代码的行号
        noLines true
        // 设置为 true 时 Lint 将不报告分析的进度
        quiet true
        // 设置为 true 则显示一个问题所在的所有地方，而不会截短列表
        showAll true
        // 配置写入输出结果的位置，格式可以是文件或 stdout
        textOutput 'stdout'
        // 设置为 true，则生成纯文本报告（默认为 false）
        textReport false
        // 设置为 true，则会把所有警告视为错误处理
        warningsAsErrors true
        // 写入检查报告的文件（不指定默认为 lint-results.xml）
        //xmlOutput file("lint-report.xml")
        // 设置为 true 则会生成一个 XML 报告
        xmlReport false
        // 将指定问题（根据 id 指定）的严重级别（severity）设置为 Fatal
        fatal 'NewApi', 'InlineApi'
        // 将指定问题（根据 id 指定）的严重级别（severity）设置为 Error
        error 'Wakelock', 'TextViewEdits'
        // 将指定问题（根据 id 指定）的严重级别（severity）设置为 Warning
        warning 'ResourceAsColor'
        // 将指定问题（根据 id 指定）的严重级别（severity）设置为 ignore
        ignore 'TypographyQuotes'
    }

}


dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api rootProject.ext.support["design"]
    api rootProject.ext.support["support-v4"]
    api rootProject.ext.support["appcompat-v7"]
    api rootProject.ext.support["recyclerview-v7"]
    api rootProject.ext.support["constraint-layout"]
    api rootProject.ext.support["kotlin"]

    api project(":lib_refresh_layout")
    api project(':lib_zky_api')

    api rootProject.ext.dependencies.rxjava
    api rootProject.ext.dependencies.rxandroid
    api rootProject.ext.dependencies.eventbus

    api rootProject.ext.dependencies.autosize
    api rootProject.ext.dependencies["oss"]
    api rootProject.ext.dependencies["arcgis"]
    api rootProject.ext.dependencies["multidex"]

    api(rootProject.ext.dependencies.rxbinding) {
        exclude group: 'com.android.support'
    }
    api(rootProject.ext.dependencies.rxpermissions) {
        exclude group: 'com.android.support'
    }

    api(rootProject.ext.dependencies.glide) {
        exclude group: 'com.android.support'
    }
    annotationProcessor rootProject.ext.dependencies["glide-compiler"]

    api rootProject.ext.dependencies["lifecycle-extensions"]
    annotationProcessor rootProject.ext.dependencies["lifecycle-compiler"]

    api rootProject.ext.dependencies["dagger"]
    kapt rootProject.ext.dependencies["dagger-compiler"]
    api rootProject.ext.dependencies["dagger-android"]
    api rootProject.ext.dependencies["dagger-android-support"]
    kapt rootProject.ext.dependencies["dagger-android-processor"]


    api rootProject.ext.dependencies["stetho"]
    api rootProject.ext.dependencies.MultiImageSelector

    api rootProject.ext.dependencies.PickerView


    api rootProject.ext.dependencies["Luban"]
    api rootProject.ext.dependencies["SmartMediaPicker"]
    api rootProject.ext.dependencies["Mp4Composer"]
    api rootProject.ext.dependencies["updateApp"]
    api rootProject.ext.dependencies["okhttputils"]

    api rootProject.ext.dependencies["gsyVideoPlayer-java"]
    api rootProject.ext.dependencies["Player-exo"]



    //根据你的需求ijk模式的so
    implementation 'com.shuyu:gsyVideoPlayer-armv5:6.0.2'
    implementation 'com.shuyu:gsyVideoPlayer-armv7a:6.0.2'
    implementation 'com.shuyu:gsyVideoPlayer-arm64:6.0.2'

}
